package stonering.game.model.system.task;

import org.jetbrains.annotations.NotNull;
import stonering.entity.job.designation.Designation;
import stonering.entity.unit.Unit;
import stonering.entity.unit.aspects.JobsAspect;
import stonering.entity.unit.aspects.PlanningAspect;
import stonering.enums.TaskStatusEnum;
import stonering.enums.time.TimeUnitEnum;
import stonering.game.GameMvc;
import stonering.game.model.Turnable;
import stonering.game.model.system.ModelComponent;
import stonering.game.model.local_map.LocalMap;
import stonering.util.geometry.Position;
import stonering.entity.job.Task;
import stonering.util.global.Logger;

import java.util.*;

import static stonering.enums.OrderStatusEnum.OPEN;

/**
 * Contains all tasks for settlers on map and Designations for rendering.
 * Tasks are created by player or by buildings and zones(farms, storages, workbenches).
 * <p>
 * {@link Task} are orders for unit.
 * {@link Designation} are used for drawing given orders as tiles.
 * Tasks and designations are linked to each other if needed.
 *
 * @author Alexander Kuzyakov
 */
public class TaskContainer implements ModelComponent, Turnable {
    public Map<String, List<Task>> tasks; // task job to all tasks with this job
    public final Set<Task> assignedTasks; // tasks, taken by some unit.
    public final HashMap<Position, Designation> designations; //this map is for rendering and modifying designations
    private Position cachePosition; // state is not maintained. should be set before use
    public final DesignationSystem designationSystem;
    public final TaskStatusSystem taskStatusSystem;

    public TaskContainer() {
        tasks = new HashMap<>();
        assignedTasks = new HashSet<>();
        designations = new HashMap<>();
        cachePosition = new Position();
        designationSystem = new DesignationSystem(this);
        taskStatusSystem = new TaskStatusSystem(this);
    }

    @Override
    public void turnUnit(TimeUnitEnum unit) {
        if(unit != TimeUnitEnum.MINUTE) {
            designationSystem.update();
        }
    }

    /**
     * Gets tasks for unit. Filters task by units's allowed jobs.
     * Does not assign task to unit, because after this method is compared to unit's other tasks, see {@link PlanningAspect}.
     */
    public Task getActiveTask(Unit unit) {
        // TODO consider task priority
        JobsAspect aspect = unit.getAspect(JobsAspect.class);
        if (aspect == null) {
            Logger.TASKS.logError("Creature " + unit + " without jobs aspect gets task from container");
            return null;
        }
        final Position position = unit.position;
        for (String enabledJob : aspect.getEnabledJobs()) {
            if (!tasks.containsKey(enabledJob)) continue;
            for (Task task : tasks.get(enabledJob)) {
                if(task.performer != null) Logger.TASKS.logError("Task " + task + " with performer is in open map." );
                if (task.performer == null &&
                        task.status == TaskStatusEnum.OPEN &&
                        GameMvc.instance().getModel().get(LocalMap.class).getPassage().hasPathBetween(position, task.nextAction.actionTarget.getPosition())) {
                    //TODO add selecting nearest task.
                    return task;
                }
            }
        }
        return null;
    }

    /**
     * Moves given task to set of taken tasks, making it unavailable for units to take.
     * If task was generated by unit (e.g. need), does nothing.
     */
    public void claimTask(@NotNull Task task) {
        if(tasks.containsKey(task.job) && tasks.get(task.job).remove(task)) assignedTasks.add(task);
    }

    /**
     * For adding simple tasks (w/o designation).
     */
    public Task addTask(Task task) {
        if (task == null) return null;
        tasks.putIfAbsent(task.job, new ArrayList<>()); // new list for job
        tasks.get(task.job).add(task);
        if (task.designation != null) designations.put(task.designation.position, task.designation);
        Logger.TASKS.logDebug("Task " + task + " added to TaskContainer.");
        return task;
    }

    public Designation getDesignation(int x, int y, int z) {
        return designations.get(cachePosition.set(x, y, z));
    }

    /**
     * Removes task from container. Does nothing with task's performer.
     */
    public void removeTask(Task task) {
        tasks.get(task.job).remove(task);
        assignedTasks.remove(task);
    }

    public void removeDesignation(Position position) {

    }
}
